{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This guidebook serves as a comprehensive documentation resource for both newcomers and experienced developers aiming to excel in map modding and level creation for FiveM.</p> <p>With tools like CodeWalker and Blender, creating maps can be as straightforward or as complex as your imagination allows. From optimizing assets to streaming maps efficiently, this guide will equip you with the knowledge and techniques to master mapping.</p> <p>Start your journey by exploring the sections in the navigation menu. Happy mapping!</p> <p>This guide wouldn't have been possible without the support of invaluable contributors from the CodeWalker project's discord server, and more. This guidebook is still a work in progress, and is constantly updating.</p>"},{"location":"intro/understanding-formats/","title":"Understanding GTA V file formats","text":"<p>Grand Theft Auto V uses a diverse range of file formats that define the game world, assets, and behaviors. Understanding these formats is critical for effective map modding and ensures your custom content integrates seamlessly into FiveM.</p> <p>CodeWalker is a comprehensive tool that accurately parses and allows editing of these file formats. I strongly recommend using CodeWalker\u2019s RPF Explorer as your primary tool for exploring and modifying GTA V\u2019s file structure.</p>"},{"location":"intro/understanding-formats/#key-file-formats-in-gta-v","title":"Key file formats in GTA V","text":""},{"location":"intro/understanding-formats/#ymap-map-data","title":"YMAP (Map Data)","text":"<p>YMAP files define the placement and properties of objects within the game. This format serves as a blueprint for map design.</p> <pre><code>flowchart TD\n    A[CMapData] --&gt;|Contains| B[CEntityDef]\n    A --&gt;|Includes| C[Extension]\n    B --&gt;|Has Attribute| D[archetypeName, flags, guid]\n    B --&gt;|Has Positioning| E[Position, Rotation, Scale]\n    B --&gt;|Contains| F[LOD Data]\n    B --&gt;|Uses Extensions| G[Extension]\n    G --&gt;|Subtype| H[CExtensionDefLightEffect]\n    H --&gt;|Light Properties| I[Primary Color, Intensity, Range]\n    I --&gt; J[Additional Lighting Data]\n    H --&gt;|Shadow Properties| K[Blur, Near Clip, Far Clip, Intensity]\n</code></pre>"},{"location":"intro/understanding-formats/#ytyp-object-definitions","title":"YTYP (Object Definitions)","text":"<p>YTYP files define object archetypes, which include the reusable properties for map assets.</p> <pre><code>flowchart TD\n    A[YTYP] --&gt;|Contains| B[Archetypes]\n    B --&gt;|Attributes| C[Name, TextureDictionary]\n    B --&gt;|Defines| D[Bounds]\n    D --&gt; E[Dimensions, Center]\n    B --&gt;|LOD Details| F[LOD Distance]\n</code></pre>"},{"location":"intro/understanding-formats/#ytd-texture-dictionary","title":"YTD (Texture Dictionary)","text":"<p>YTD files are repositories of textures, used to apply visual details to models in <code>.ydr</code> or <code>.yft</code> files.</p> <pre><code>flowchart TD\n    A[YTD] --&gt;|Contains| B[Texture List]\n    B --&gt;|Attributes| C[Name, Texture Files]\n    B --&gt;|File Types| D[PNG, DDS]\n    A --&gt;|Used By| E[YDR, YFT]\n</code></pre>"},{"location":"intro/understanding-formats/#ydr-drawable-models","title":"YDR (Drawable Models)","text":"<p>YDR files are used for static or dynamic 3D objects.</p> <pre><code>flowchart TD\n    A[YDR] --&gt;|Defines| B[Mesh Data]\n    B --&gt;|Includes| C[Vertices, Faces, Normals]\n    A --&gt;|Includes| D[Materials]\n    D --&gt;|Attributes| E[Texture Dictionary, Shaders]\n    A --&gt;|Optimized By| F[LOD Data]\n</code></pre>"},{"location":"intro/understanding-formats/#yft-fragment-models","title":"YFT (Fragment Models)","text":"<p>YFT files define interactive or dynamic objects, such as vehicles or doors.</p> <pre><code>flowchart TD\n    A[YFT] --&gt;|Includes| B[Mesh Data]\n    B --&gt;|Contains| C[Collision Data]\n    C --&gt;|Attributes| D[Bounds, Physics]\n    A --&gt;|Interactive Objects| E[Vehicles, Doors]\n    E --&gt;|Attributes| F[Animations, Movement]\n</code></pre>"},{"location":"intro/understanding-formats/#ybn-collision-bounds","title":"YBN (Collision Bounds)","text":"<p>YBN files define collision boundaries for various objects, ensuring appropriate physical interactions.</p> <pre><code>flowchart TD\n    A[YBN] --&gt;|Defines| B[Collision Mesh]\n    B --&gt;|Composed of| C[Vertices, Edges, Faces]\n    B --&gt;|Assigned| D[Materials]\n    D --&gt;|Specify| E[Friction, Elasticity, Impact Sound]\n    B --&gt;|Approximated by| F[Bounding Volumes]\n    F --&gt;|Types| G[Box, Sphere, Capsule]\n    A --&gt;|Organized by| H[Hierarchy]\n    H --&gt;|Contains| I[Collision Components]\n    A --&gt;|Associated with| J[YDR, YFT]\n</code></pre>"},{"location":"intro/understanding-formats/#ynv-navigation-mesh","title":"YNV (Navigation Mesh)","text":"<p>YNV files provide navigation meshes for AI movement.</p> <pre><code>flowchart TD\n    A[YNV] --&gt;|Defines| B[Navigation Areas]\n    B --&gt;|Attributes| C[Position, Dimensions]\n    B --&gt;|Connected To| D[Links]\n    D --&gt;|Defines Movement| E[Vehicles, Pedestrians]\n    A --&gt;|Used By AI| F[Pathfinding]\n</code></pre>"},{"location":"intro/understanding-formats/#ycd-clips-dictionary","title":"YCD (Clips Dictionary)","text":"<p>YCD files store animation data for characters and objects.</p> <pre><code>flowchart TD\n    A[YCD] --&gt;|Stores| B[Animation Clips]\n    B --&gt;|Attributes| C[Duration, Transitions]\n    B --&gt;|References| D[Skeletal Models]\n    A --&gt;|Used By| E[Characters, Vehicles]\n</code></pre>"},{"location":"intro/understanding-formats/#review-of-file-formats","title":"Review of file formats","text":"<ol> <li>YMAP: Place entities and props in the world</li> <li>YTYP: Define reusable object archetypes</li> <li>YDR/YFT: Provide models and interactive objects</li> <li>YTD: Supply textures for visual representation</li> <li>YBN: Define collision boundaries for physical interactions</li> <li>YNV: Set up navigation for AI pathfinding</li> <li>YCD: Define animations for characters and objects</li> </ol> <p>This reference consolidates the core GTA V file formats and their interrelations for modding and custom map modding.</p>"},{"location":"intro/what-is-mapping/","title":"What is Mapping?","text":"<p>My definition of mapping (map modding) is the process of creating, modifying, and enhancing the virtual environments within Grand Theft Auto V. It allows modders and developers to transform a server by adding new locations, customizing interiors, or improving existing areas. Mapping is an essential aspect of modding, as it not only adds aesthetic value but also enhances gameplay by creating immersive and functional spaces.</p>"},{"location":"intro/what-is-mapping/#mapping-divisions","title":"Mapping Divisions","text":"<p>Personally, I categorize mapping into two primary types:</p> <p>Interior instance mapping (MLOs):</p> <ul> <li>Interior Instance mapping refers to creating or modifying interiors using instanced spaces.</li> <li>These are typically used for buildings, apartments, or other indoor environments where players can enter and interact.</li> </ul> <p>(cont.):</p> <ul> <li>Uses portals to connect rooms.</li> <li>Requires specific lighting and physics adjustments.</li> <li>Can be more complex due to collision and interior handling.</li> </ul> <p>External mapping (Non-MLO):</p> <ul> <li>External mapping refers to modifying or adding objects to the external game world.</li> <li>Includes outdoor environments like parks, roads, custom buildings, or large terrain edits.</li> </ul> <p>(cont.):</p> <ul> <li>Focuses on seamless integration with the game.</li> <li>Often involves terrain sculpting and object placement.</li> <li>Less complex than MLOs but requires attention to optimization.</li> </ul>"},{"location":"intro/what-is-mapping/#effective-mapping-workflow","title":"Effective mapping workflow","text":"<pre><code>flowchart TD\n    A[Concept] --&gt; B[Tool Selection]\n    B --&gt; C[Design and Creation]\n    C --&gt; D[Testing and Optimization]\n    D --&gt; E[Implementation]\n    E --&gt; F[Updates]\n</code></pre> <p>Concept:</p> <ul> <li>Define the purpose and vision for your map.</li> </ul> <p>Tool Selection:</p> <ul> <li>Choose tools like CodeWalker, Blender, and Sollumz.</li> </ul> <p>Design and Creation:</p> <ul> <li>Build your map by placing objects and defining details.</li> </ul> <p>Testing and Optimization:</p> <ul> <li>Ensure performance and fix issues.</li> </ul> <p>Implementation:</p> <ul> <li>Save and integrate the map into FiveM.</li> </ul> <p>Updates:</p> <ul> <li>Make adjustments based on feedback.</li> </ul>"},{"location":"intro/what-is-mapping/#tools-and-processes","title":"Tools and Processes","text":"<pre><code>mindmap\n    root((Mapping))\n        Tools\n            CodeWalker\n            Blender\n            Sollumz\n        Processes\n            Concept\n            Design\n            Optimization\n            Implementation\n        Types\n            Interior Mapping\n                MLO\n                Portals\n                Lighting\n            External Mapping\n                Terrain\n                Propwork\n</code></pre>"},{"location":"intro/what-is-mapping/#common-challenges-in-mapping","title":"Common Challenges in Mapping","text":"<p>Performance Optimization:</p> <ul> <li>High polygon counts and unoptimized textures can reduce performance.</li> <li>Use LODs (Levels of Detail) to balance quality and performance.</li> </ul> <p>Lighting Issues (MLOs):</p> <ul> <li>Improper lighting and improper use of flags can break visual fidelity in MLOs.</li> <li>Test different configurations to ensure proper visibility.</li> </ul> <p>Collision Flags:</p> <ul> <li>Ensure accurate collision data to prevent players from falling through objects.</li> </ul> <p>By understanding the fundamentals of mapping and leveraging the right tools, you can create functional spaces that elevate your FiveM sever's map.</p>"}]}